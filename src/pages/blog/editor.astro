---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { requireAuth } from '../../lib/auth';

export const prerender = false;

// Require authentication
const session = requireAuth(Astro.cookies);
---

<BaseLayout title="Blog Editor - Retailaer">
  <div class="editor-container">
    <div class="editor-header">
      <div class="editor-header-left">
        <h1>Blog Editor</h1>
        <span class="user-badge">
          {session.picture && <img src={session.picture} alt={session.name} class="user-avatar" />}
          <span class="user-name">{session.name}</span>
        </span>
      </div>
      <div class="editor-actions">
        <button id="save-draft" class="btn btn-secondary">Save Draft</button>
        <button id="publish" class="btn btn-primary">Publish</button>
        <a href="/blog/posts" class="btn btn-secondary">View All Posts</a>
        <a href="/api/auth/logout" class="btn btn-secondary">Logout</a>
      </div>
    </div>

    <div class="editor-meta">
      <input
        type="text"
        id="post-title"
        placeholder="Post Title"
        class="title-input"
      />
      <input
        type="text"
        id="post-slug"
        placeholder="post-slug"
        class="slug-input"
      />
      <input
        type="text"
        id="post-author"
        placeholder="Author Name"
        class="author-input"
      />
      <textarea
        id="post-excerpt"
        placeholder="Short excerpt (optional)"
        class="excerpt-input"
        rows="2"
      ></textarea>
    </div>

    <div id="milkdown-editor" class="milkdown-container"></div>
  </div>

  <style>
    .editor-container {
      max-width: 1200px;
      margin: 100px auto 50px;
      padding: 0 2rem;
    }

    .editor-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      padding-bottom: 1rem;
      border-bottom: 2px solid var(--color-border, #e5e7eb);
    }

    .editor-header-left {
      display: flex;
      align-items: center;
      gap: 1.5rem;
    }

    .editor-header h1 {
      font-size: 2rem;
      font-weight: 700;
      color: var(--color-primary, #0a5c5c);
      margin: 0;
    }

    .user-badge {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 1rem;
      background: #f0f7f7;
      border-radius: 20px;
      font-size: 0.875rem;
      color: #0a5c5c;
    }

    .user-avatar {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      object-fit: cover;
    }

    .user-name {
      font-weight: 500;
    }

    .editor-actions {
      display: flex;
      gap: 1rem;
    }

    .editor-meta {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .title-input {
      font-size: 2rem;
      font-weight: 700;
      border: none;
      border-bottom: 2px solid #e5e7eb;
      padding: 0.5rem 0;
      outline: none;
      transition: border-color 0.2s;
    }

    .title-input:focus {
      border-bottom-color: var(--color-primary, #0a5c5c);
    }

    .slug-input,
    .author-input,
    .excerpt-input {
      font-size: 1rem;
      border: 1px solid #e5e7eb;
      border-radius: 4px;
      padding: 0.75rem;
      outline: none;
      transition: border-color 0.2s;
    }

    .slug-input:focus,
    .author-input:focus,
    .excerpt-input:focus {
      border-color: var(--color-primary, #0a5c5c);
    }

    .excerpt-input {
      resize: vertical;
      font-family: inherit;
    }

    .milkdown-container {
      min-height: 500px;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 2rem;
      background: white;
    }

    /* Milkdown theme overrides */
    :global(.milkdown) {
      min-height: 400px;
    }

    :global(.milkdown .editor) {
      outline: none;
    }

    @media (max-width: 768px) {
      .editor-container {
        padding: 0 1rem;
        margin-top: 80px;
      }

      .editor-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }

      .editor-actions {
        width: 100%;
        flex-direction: column;
      }

      .title-input {
        font-size: 1.5rem;
      }
    }
  </style>

  <script>
    import { Editor, rootCtx } from '@milkdown/core';
    import { commonmark } from '@milkdown/preset-commonmark';
    import { gfm } from '@milkdown/preset-gfm';
    import { nord } from '@milkdown/theme-nord';
    import { history } from '@milkdown/plugin-history';
    import { clipboard } from '@milkdown/plugin-clipboard';
    import { listener, listenerCtx } from '@milkdown/plugin-listener';

    // Initialize editor
    let editor: Editor;
    let currentPostId: string | null = null;

    async function initEditor() {
      const container = document.getElementById('milkdown-editor');
      if (!container) return;

      editor = await Editor.make()
        .config((ctx) => {
          ctx.set(rootCtx, container);
          ctx.get(listenerCtx).markdownUpdated((ctx, markdown) => {
            // Auto-save to localStorage
            localStorage.setItem('editor-content', markdown);
          });
        })
        .use(nord)
        .use(commonmark)
        .use(gfm)
        .use(history)
        .use(clipboard)
        .use(listener)
        .create();

      // Load from URL params if editing existing post
      const params = new URLSearchParams(window.location.search);
      const postId = params.get('id');

      if (postId) {
        await loadPost(postId);
      } else {
        // Load draft from localStorage
        const draft = localStorage.getItem('editor-content');
        if (draft) {
          editor.action((ctx) => {
            const view = ctx.get(editorViewCtx);
            view.dispatch(view.state.tr.insertText(draft));
          });
        }
      }
    }

    async function loadPost(postId: string) {
      currentPostId = postId;
      try {
        const response = await fetch(`/api/blog/${postId}`);
        const post = await response.json();

        // Populate meta fields
        (document.getElementById('post-title') as HTMLInputElement).value = post.title;
        (document.getElementById('post-slug') as HTMLInputElement).value = post.slug;
        (document.getElementById('post-author') as HTMLInputElement).value = post.author;
        (document.getElementById('post-excerpt') as HTMLTextAreaElement).value = post.excerpt || '';

        // Load content into editor
        // Note: This will be implemented once we have the proper Milkdown API
      } catch (error) {
        console.error('Failed to load post:', error);
        alert('Failed to load post');
      }
    }

    async function savePost(publish: boolean = false) {
      const title = (document.getElementById('post-title') as HTMLInputElement).value;
      const slug = (document.getElementById('post-slug') as HTMLInputElement).value;
      const author = (document.getElementById('post-author') as HTMLInputElement).value;
      const excerpt = (document.getElementById('post-excerpt') as HTMLTextAreaElement).value;
      const content = localStorage.getItem('editor-content') || '';

      if (!title || !slug || !author) {
        alert('Please fill in title, slug, and author');
        return;
      }

      const post = {
        id: currentPostId || Date.now().toString(),
        title,
        slug,
        author,
        excerpt,
        content,
        status: publish ? 'published' : 'draft',
        createdAt: currentPostId ? undefined : new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      try {
        const response = await fetch('/api/blog/save', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(post),
        });

        if (response.ok) {
          const result = await response.json();
          currentPostId = result.id;
          alert(publish ? 'Post published!' : 'Draft saved!');

          // Clear localStorage draft
          if (publish) {
            localStorage.removeItem('editor-content');
          }

          // Redirect to posts list
          window.location.href = '/blog/posts';
        } else {
          alert('Failed to save post');
        }
      } catch (error) {
        console.error('Save error:', error);
        alert('Error saving post');
      }
    }

    // Event listeners
    document.getElementById('save-draft')?.addEventListener('click', () => savePost(false));
    document.getElementById('publish')?.addEventListener('click', () => savePost(true));

    // Auto-generate slug from title
    document.getElementById('post-title')?.addEventListener('input', (e) => {
      const title = (e.target as HTMLInputElement).value;
      const slugInput = document.getElementById('post-slug') as HTMLInputElement;

      if (!slugInput.value) {
        const slug = title
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, '-')
          .replace(/(^-|-$)/g, '');
        slugInput.value = slug;
      }
    });

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initEditor);
    } else {
      initEditor();
    }
  </script>
</BaseLayout>
