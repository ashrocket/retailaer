---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { requireAuth } from '../../lib/auth';

export const prerender = false;

// Require authentication
const session = requireAuth(Astro.cookies);
---

<BaseLayout title="Blog Editor - Retailaer">
  <div class="editor-container">
    <div class="editor-header">
      <div class="editor-header-left">
        <h1>Blog Editor</h1>
        <span class="user-badge">
          {session.picture && <img src={session.picture} alt={session.name} class="user-avatar" />}
          <span class="user-name">{session.name}</span>
        </span>
      </div>
      <div class="editor-actions">
        <button id="save-draft" class="btn btn-secondary">Save Draft</button>
        <button id="publish" class="btn btn-primary">Publish</button>
        <a href="/blog/posts" class="btn btn-secondary">View All Posts</a>
        <a href="/api/auth/logout" class="btn btn-secondary">Logout</a>
      </div>
    </div>

    <div class="editor-meta">
      <input
        type="text"
        id="post-title"
        placeholder="Post Title"
        class="title-input"
      />
      <input
        type="text"
        id="post-slug"
        placeholder="post-slug"
        class="slug-input"
      />
      <input
        type="text"
        id="post-author"
        placeholder="Author Name"
        class="author-input"
      />
      <textarea
        id="post-excerpt"
        placeholder="Short excerpt (optional)"
        class="excerpt-input"
        rows="2"
      ></textarea>
    </div>

    <div id="milkdown-editor" class="milkdown-container"></div>
  </div>

  <style>
    /* LinkedIn-inspired editor styles */
    * {
      box-sizing: border-box;
    }

    .editor-container {
      max-width: 730px; /* LinkedIn's article width */
      margin: 0 auto;
      padding: 0;
      background: white;
      min-height: 100vh;
    }

    /* Top bar - like LinkedIn */
    .editor-header {
      position: sticky;
      top: 60px; /* Below main nav */
      background: white;
      border-bottom: 1px solid #e0e0e0;
      padding: 12px 24px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      z-index: 100;
    }

    .editor-header-left {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .editor-header h1 {
      font-size: 16px;
      font-weight: 600;
      color: #000000de;
      margin: 0;
    }

    .user-badge {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 4px 12px;
      background: #f3f6f8;
      border-radius: 16px;
      font-size: 14px;
      color: #00000099;
    }

    .user-avatar {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      object-fit: cover;
    }

    .user-name {
      font-weight: 400;
    }

    .editor-actions {
      display: flex;
      gap: 8px;
      align-items: center;
    }

    .editor-actions .btn {
      height: 32px;
      padding: 0 16px;
      border-radius: 16px;
      font-size: 14px;
      font-weight: 600;
      border: none;
      cursor: pointer;
      transition: all 0.2s;
    }

    .editor-actions .btn-secondary {
      background: transparent;
      color: #666;
      border: 1px solid #666;
    }

    .editor-actions .btn-secondary:hover {
      background: #f3f6f8;
      border-color: #000000de;
      color: #000000de;
    }

    .editor-actions .btn-primary {
      background: #0A66C2; /* LinkedIn blue */
      color: white;
      border: none;
    }

    .editor-actions .btn-primary:hover {
      background: #004182;
    }

    .editor-actions a.btn {
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }

    /* LinkedIn-style meta fields - hidden by default */
    .editor-meta {
      padding: 24px 48px;
      border-bottom: 1px solid #e0e0e0;
      background: #fafafa;
    }

    .editor-meta.hidden {
      display: none;
    }

    /* Title input - Large and bold like LinkedIn */
    .title-input {
      width: 100%;
      font-size: 48px;
      font-weight: 400;
      line-height: 1.2;
      border: none;
      padding: 48px 48px 24px;
      outline: none;
      font-family: -apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', 'Fira Sans', Ubuntu, Oxygen, 'Oxygen Sans', Cantarell, 'Droid Sans', 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Lucida Grande', Helvetica, Arial, sans-serif;
      color: #000000de;
      background: white;
    }

    .title-input::placeholder {
      color: #00000061;
    }

    /* Subtitle/excerpt - lighter weight */
    .excerpt-input {
      width: 100%;
      font-size: 20px;
      font-weight: 400;
      line-height: 1.4;
      border: none;
      padding: 0 48px 24px;
      outline: none;
      resize: none;
      min-height: 60px;
      font-family: -apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
      color: #00000099;
      background: white;
    }

    .excerpt-input::placeholder {
      color: #00000061;
    }

    /* Hidden metadata fields */
    .slug-input,
    .author-input {
      display: none;
    }

    /* Editor content area - clean and spacious */
    .milkdown-container {
      padding: 24px 48px 100px;
      min-height: 500px;
      background: white;
      border: none;
    }

    /* Milkdown LinkedIn-style overrides */
    :global(.milkdown) {
      font-family: -apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
      font-size: 21px;
      line-height: 1.58;
      color: #000000de;
      min-height: 400px;
    }

    :global(.milkdown .editor) {
      outline: none;
    }

    :global(.milkdown p) {
      margin-bottom: 1.58em;
    }

    :global(.milkdown h1) {
      font-size: 32px;
      font-weight: 600;
      margin-top: 1.5em;
      margin-bottom: 0.5em;
    }

    :global(.milkdown h2) {
      font-size: 26px;
      font-weight: 600;
      margin-top: 1.4em;
      margin-bottom: 0.4em;
    }

    :global(.milkdown h3) {
      font-size: 21px;
      font-weight: 600;
      margin-top: 1.3em;
      margin-bottom: 0.3em;
    }

    :global(.milkdown blockquote) {
      border-left: 3px solid #e0e0e0;
      padding-left: 20px;
      margin-left: 0;
      font-style: italic;
      color: #00000099;
    }

    :global(.milkdown code) {
      background: #f3f6f8;
      padding: 2px 6px;
      border-radius: 3px;
      font-family: 'Monaco', 'Menlo', 'Consolas', monospace;
      font-size: 0.9em;
    }

    :global(.milkdown a) {
      color: #0A66C2;
      text-decoration: none;
    }

    :global(.milkdown a:hover) {
      text-decoration: underline;
    }

    @media (max-width: 768px) {
      .editor-container {
        padding: 0;
      }

      .editor-header {
        padding: 12px 16px;
        top: 0;
      }

      .editor-header-left {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
      }

      .editor-actions {
        flex-wrap: wrap;
      }

      .title-input {
        font-size: 36px;
        padding: 32px 24px 16px;
      }

      .excerpt-input {
        font-size: 18px;
        padding: 0 24px 16px;
      }

      .milkdown-container {
        padding: 16px 24px 80px;
      }

      :global(.milkdown) {
        font-size: 18px;
      }
    }
  </style>

  <script>
    import { Editor, rootCtx } from '@milkdown/core';
    import { commonmark } from '@milkdown/preset-commonmark';
    import { gfm } from '@milkdown/preset-gfm';
    import { nord } from '@milkdown/theme-nord';
    import { history } from '@milkdown/plugin-history';
    import { clipboard } from '@milkdown/plugin-clipboard';
    import { listener, listenerCtx } from '@milkdown/plugin-listener';

    // Initialize editor
    let editor: Editor;
    let currentPostId: string | null = null;

    async function initEditor() {
      const container = document.getElementById('milkdown-editor');
      if (!container) return;

      editor = await Editor.make()
        .config((ctx) => {
          ctx.set(rootCtx, container);
          ctx.get(listenerCtx).markdownUpdated((ctx, markdown) => {
            // Auto-save to localStorage
            localStorage.setItem('editor-content', markdown);
          });
        })
        .use(nord)
        .use(commonmark)
        .use(gfm)
        .use(history)
        .use(clipboard)
        .use(listener)
        .create();

      // Load from URL params if editing existing post
      const params = new URLSearchParams(window.location.search);
      const postId = params.get('id');

      if (postId) {
        await loadPost(postId);
      } else {
        // Load draft from localStorage
        const draft = localStorage.getItem('editor-content');
        if (draft) {
          editor.action((ctx) => {
            const view = ctx.get(editorViewCtx);
            view.dispatch(view.state.tr.insertText(draft));
          });
        }
      }
    }

    async function loadPost(postId: string) {
      currentPostId = postId;
      try {
        const response = await fetch(`/api/blog/${postId}`);
        const post = await response.json();

        // Populate meta fields
        (document.getElementById('post-title') as HTMLInputElement).value = post.title;
        (document.getElementById('post-slug') as HTMLInputElement).value = post.slug;
        (document.getElementById('post-author') as HTMLInputElement).value = post.author;
        (document.getElementById('post-excerpt') as HTMLTextAreaElement).value = post.excerpt || '';

        // Load content into editor
        // Note: This will be implemented once we have the proper Milkdown API
      } catch (error) {
        console.error('Failed to load post:', error);
        alert('Failed to load post');
      }
    }

    async function savePost(publish: boolean = false) {
      const title = (document.getElementById('post-title') as HTMLInputElement).value;
      const slug = (document.getElementById('post-slug') as HTMLInputElement).value;
      const author = (document.getElementById('post-author') as HTMLInputElement).value;
      const excerpt = (document.getElementById('post-excerpt') as HTMLTextAreaElement).value;
      const content = localStorage.getItem('editor-content') || '';

      if (!title || !slug || !author) {
        alert('Please fill in title, slug, and author');
        return;
      }

      const post = {
        id: currentPostId || Date.now().toString(),
        title,
        slug,
        author,
        excerpt,
        content,
        status: publish ? 'published' : 'draft',
        createdAt: currentPostId ? undefined : new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      try {
        const response = await fetch('/api/blog/save', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(post),
        });

        if (response.ok) {
          const result = await response.json();
          currentPostId = result.id;
          alert(publish ? 'Post published!' : 'Draft saved!');

          // Clear localStorage draft
          if (publish) {
            localStorage.removeItem('editor-content');
          }

          // Redirect to posts list
          window.location.href = '/blog/posts';
        } else {
          alert('Failed to save post');
        }
      } catch (error) {
        console.error('Save error:', error);
        alert('Error saving post');
      }
    }

    // Event listeners
    document.getElementById('save-draft')?.addEventListener('click', () => savePost(false));
    document.getElementById('publish')?.addEventListener('click', () => savePost(true));

    // Auto-generate slug from title
    document.getElementById('post-title')?.addEventListener('input', (e) => {
      const title = (e.target as HTMLInputElement).value;
      const slugInput = document.getElementById('post-slug') as HTMLInputElement;

      if (!slugInput.value) {
        const slug = title
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, '-')
          .replace(/(^-|-$)/g, '');
        slugInput.value = slug;
      }
    });

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initEditor);
    } else {
      initEditor();
    }
  </script>
</BaseLayout>
