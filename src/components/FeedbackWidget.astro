---
// Enhanced Feedback widget with selection and screenshot capabilities
---

<div id="feedback-widget" class="feedback-widget">
  <button id="feedback-trigger" class="feedback-trigger" aria-label="Report an issue">
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
      <path d="M12 7v2m0 4h.01"/>
    </svg>
  </button>

  <div id="feedback-panel" class="feedback-panel hidden">
    <div class="feedback-header">
      <h3>What's wrong with the website?</h3>
      <button id="feedback-close" class="feedback-close" aria-label="Close">Ã—</button>
    </div>

    <div class="feedback-body">
      <p class="feedback-description">Help us improve! Select text, sections, or add screenshots.</p>

      <!-- Selection Tools -->
      <div class="selection-tools">
        <button type="button" id="select-text-btn" class="tool-btn" title="Select text or section">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M3 3l7.07 16.97 2.51-7.39 7.39-2.51L3 3z"/>
          </svg>
          <span>Select Element</span>
        </button>
        <button type="button" id="screenshot-btn" class="tool-btn" title="Take screenshot">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="3" width="18" height="18" rx="2"/>
            <circle cx="8.5" cy="8.5" r="1.5"/>
            <path d="M21 15l-5-5L5 21"/>
          </svg>
          <span>Screenshot</span>
        </button>
      </div>

      <!-- Selections List -->
      <div id="selections-container" class="selections-container hidden">
        <h4>Selected Items:</h4>
        <ul id="selections-list" class="selections-list"></ul>
      </div>

      <form id="feedback-form">
        <div class="form-group">
          <label for="feedback-title">Brief description</label>
          <input
            type="text"
            id="feedback-title"
            name="title"
            placeholder="e.g., Contact form doesn't work"
            required
            maxlength="100"
          />
        </div>

        <div class="form-group">
          <label for="feedback-details">Details (optional)</label>
          <textarea
            id="feedback-details"
            name="details"
            placeholder="What happened? What did you expect?"
            rows="4"
          ></textarea>
        </div>

        <div class="form-group">
          <label for="feedback-email">Your email (optional)</label>
          <input
            type="email"
            id="feedback-email"
            name="email"
            placeholder="you@example.com"
          />
        </div>

        <div class="feedback-actions">
          <button type="button" id="feedback-cancel" class="btn-secondary">Cancel</button>
          <button type="submit" class="btn-primary">Submit Feedback</button>
        </div>
      </form>

      <div id="feedback-success" class="feedback-success hidden">
        <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/>
          <polyline points="22 4 12 14.01 9 11.01"/>
        </svg>
        <p>Thanks for your feedback!</p>
        <p class="feedback-success-note">We've created a GitHub issue and will look into it.</p>
      </div>

      <div id="feedback-error" class="feedback-error hidden">
        <p>Sorry, something went wrong. Please try again or <a href="https://github.com/ashrocket/retailaer/issues/new" target="_blank">create an issue directly on GitHub</a>.</p>
      </div>
    </div>
  </div>

  <!-- Selection Mode Overlay -->
  <div id="selection-overlay" class="selection-overlay hidden">
    <div class="selection-instructions">
      Click on any element to select it, or press ESC to cancel
    </div>
  </div>

  <!-- Element Highlight -->
  <div id="element-highlight" class="element-highlight hidden"></div>
</div>

<style>
  .feedback-widget {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
  }

  .feedback-trigger {
    width: 56px;
    height: 56px;
    border-radius: 50%;
    background: var(--color-primary, #0a5c5c);
    color: white;
    border: none;
    cursor: pointer;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .feedback-trigger:hover {
    transform: scale(1.05);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
  }

  .feedback-panel {
    position: fixed;
    bottom: 90px;
    right: 20px;
    width: 420px;
    max-width: calc(100vw - 40px);
    max-height: calc(100vh - 120px);
    background: white;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
    overflow-y: auto;
    transition: all 0.3s ease;
    z-index: 1001;
  }

  .feedback-panel.hidden {
    opacity: 0;
    pointer-events: none;
    transform: translateY(10px);
  }

  .feedback-header {
    padding: 20px;
    background: var(--color-primary, #0a5c5c);
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: sticky;
    top: 0;
    z-index: 10;
  }

  .feedback-header h3 {
    margin: 0;
    font-size: 18px;
    font-weight: 500;
  }

  .feedback-close {
    background: none;
    border: none;
    color: white;
    font-size: 28px;
    line-height: 1;
    cursor: pointer;
    padding: 0;
    width: 28px;
    height: 28px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    transition: background 0.2s ease;
  }

  .feedback-close:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .feedback-body {
    padding: 20px;
  }

  .feedback-description {
    margin: 0 0 16px 0;
    font-size: 14px;
    color: #666;
  }

  /* Selection Tools */
  .selection-tools {
    display: flex;
    gap: 8px;
    margin-bottom: 16px;
  }

  .tool-btn {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
    padding: 10px 12px;
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    font-size: 13px;
    font-weight: 500;
    color: #374151;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .tool-btn:hover {
    background: #f3f4f6;
    border-color: var(--color-primary, #0a5c5c);
    color: var(--color-primary, #0a5c5c);
  }

  .tool-btn.active {
    background: var(--color-primary, #0a5c5c);
    border-color: var(--color-primary, #0a5c5c);
    color: white;
  }

  .tool-btn svg {
    flex-shrink: 0;
  }

  /* Selections List */
  .selections-container {
    margin-bottom: 16px;
    padding: 12px;
    background: #f9fafb;
    border-radius: 8px;
    border: 1px solid #e5e7eb;
  }

  .selections-container h4 {
    margin: 0 0 10px 0;
    font-size: 13px;
    font-weight: 600;
    color: #374151;
  }

  .selections-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .selection-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    margin-bottom: 6px;
    font-size: 13px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .selection-item:hover {
    border-color: var(--color-primary, #0a5c5c);
    background: #f0f9ff;
  }

  .selection-item-icon {
    flex-shrink: 0;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-primary, #0a5c5c);
  }

  .selection-item-content {
    flex: 1;
    overflow: hidden;
  }

  .selection-item-text {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    color: #1f2937;
  }

  .selection-item-meta {
    font-size: 11px;
    color: #9ca3af;
    margin-top: 2px;
  }

  .selection-item-delete {
    flex-shrink: 0;
    background: none;
    border: none;
    color: #ef4444;
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: background 0.2s ease;
  }

  .selection-item-delete:hover {
    background: #fee2e2;
  }

  .selection-item.screenshot .selection-item-content {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .screenshot-thumb {
    width: 40px;
    height: 30px;
    object-fit: cover;
    border-radius: 4px;
    border: 1px solid #e5e7eb;
  }

  /* Form Styles */
  .form-group {
    margin-bottom: 16px;
  }

  .form-group label {
    display: block;
    margin-bottom: 6px;
    font-weight: 500;
    font-size: 14px;
    color: #333;
  }

  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
    font-family: inherit;
    transition: border-color 0.2s ease;
  }

  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--color-primary, #0a5c5c);
  }

  .form-group textarea {
    resize: vertical;
    min-height: 80px;
  }

  .feedback-actions {
    display: flex;
    gap: 10px;
    margin-top: 20px;
  }

  .feedback-actions button {
    flex: 1;
    padding: 10px 16px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .btn-primary {
    background: var(--color-primary, #0a5c5c);
    color: white;
    border: none;
  }

  .btn-primary:hover {
    background: var(--color-primary-dark, #084a4f);
  }

  .btn-secondary {
    background: #f5f5f5;
    color: #333;
    border: 1px solid #ddd;
  }

  .btn-secondary:hover {
    background: #ececec;
  }

  .feedback-success,
  .feedback-error {
    text-align: center;
    padding: 20px 0;
  }

  .feedback-success svg {
    color: #10b981;
    margin-bottom: 16px;
  }

  .feedback-success p {
    margin: 8px 0;
  }

  .feedback-success-note {
    font-size: 13px;
    color: #666;
  }

  .feedback-error {
    color: #ef4444;
  }

  .feedback-error a {
    color: var(--color-primary, #0a5c5c);
    text-decoration: underline;
  }

  /* Selection Mode Overlay */
  .selection-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.3);
    z-index: 999;
    cursor: crosshair;
  }

  .selection-overlay.hidden {
    display: none;
  }

  .selection-instructions {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: white;
    padding: 12px 24px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    font-size: 14px;
    font-weight: 500;
    color: #1f2937;
    z-index: 1000;
  }

  /* Element Highlight */
  .element-highlight {
    position: absolute;
    pointer-events: none;
    border: 2px solid var(--color-accent, #f5b800);
    background: rgba(245, 184, 0, 0.1);
    z-index: 998;
    transition: all 0.1s ease;
  }

  .element-highlight.hidden {
    display: none;
  }

  .hidden {
    display: none !important;
  }

  @media (max-width: 768px) {
    .feedback-panel {
      bottom: 80px;
      right: 10px;
      left: 10px;
      width: auto;
      max-width: none;
    }

    .feedback-trigger {
      bottom: 10px;
      right: 10px;
    }

    .selection-tools {
      flex-direction: column;
    }
  }
</style>

<script>
  import html2canvas from 'html2canvas';

  // Types
  interface Selection {
    id: string;
    type: 'text' | 'element' | 'screenshot';
    content: string;
    selector?: string;
    bounds?: DOMRect;
    screenshot?: string;
    timestamp: number;
  }

  // State
  let selections: Selection[] = [];
  let selectionMode: 'text' | 'screenshot' | null = null;
  let highlightedElement: HTMLElement | null = null;

  // DOM Elements
  const trigger = document.getElementById('feedback-trigger');
  const panel = document.getElementById('feedback-panel');
  const closeBtn = document.getElementById('feedback-close');
  const cancelBtn = document.getElementById('feedback-cancel');
  const form = document.getElementById('feedback-form');
  const successMsg = document.getElementById('feedback-success');
  const errorMsg = document.getElementById('feedback-error');
  const emailInput = document.getElementById('feedback-email') as HTMLInputElement;

  const selectTextBtn = document.getElementById('select-text-btn');
  const screenshotBtn = document.getElementById('screenshot-btn');
  const selectionsContainer = document.getElementById('selections-container');
  const selectionsList = document.getElementById('selections-list');
  const selectionOverlay = document.getElementById('selection-overlay');
  const elementHighlight = document.getElementById('element-highlight');

  // Cookie utility functions
  function setCookie(name: string, value: string, days: number = 365) {
    const expires = new Date();
    expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);
    document.cookie = `${name}=${encodeURIComponent(value)};expires=${expires.toUTCString()};path=/;SameSite=Lax`;
  }

  function getCookie(name: string): string | null {
    const nameEQ = name + '=';
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) === ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) === 0) {
        return decodeURIComponent(c.substring(nameEQ.length, c.length));
      }
    }
    return null;
  }

  // Load selections from cookie
  function loadSelections() {
    const saved = getCookie('feedback_selections');
    if (saved) {
      try {
        selections = JSON.parse(saved);
        renderSelections();
      } catch (e) {
        console.error('Failed to load selections:', e);
        selections = [];
      }
    }
  }

  // Save selections to cookie
  function saveSelections() {
    setCookie('feedback_selections', JSON.stringify(selections), 1); // 1 day expiry
    renderSelections();
  }

  // Generate CSS selector for element
  function getSelector(element: HTMLElement): string {
    if (element.id) return `#${element.id}`;

    let path: string[] = [];
    let current: HTMLElement | null = element;

    while (current && current !== document.body) {
      let selector = current.tagName.toLowerCase();

      if (current.className) {
        const classes = current.className.split(' ').filter(c => c && !c.startsWith('feedback-'));
        if (classes.length > 0) {
          selector += '.' + classes.slice(0, 2).join('.');
        }
      }

      path.unshift(selector);
      current = current.parentElement;
    }

    return path.slice(-3).join(' > '); // Last 3 levels
  }

  // Get text preview from element
  function getTextPreview(element: HTMLElement, maxLength: number = 50): string {
    const text = element.innerText || element.textContent || '';
    const cleaned = text.trim().replace(/\s+/g, ' ');
    return cleaned.length > maxLength ? cleaned.substring(0, maxLength) + '...' : cleaned;
  }

  // Render selections list
  function renderSelections() {
    if (!selectionsList || !selectionsContainer) return;

    if (selections.length === 0) {
      selectionsContainer.classList.add('hidden');
      return;
    }

    selectionsContainer.classList.remove('hidden');
    selectionsList.innerHTML = '';

    selections.forEach((selection, index) => {
      const li = document.createElement('li');
      li.className = `selection-item ${selection.type}`;
      li.dataset.index = index.toString();

      let icon = '';
      let content = '';

      if (selection.type === 'element' || selection.type === 'text') {
        icon = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M3 3l7.07 16.97 2.51-7.39 7.39-2.51L3 3z"/></svg>';
        content = `
          <div class="selection-item-text">${selection.content}</div>
          <div class="selection-item-meta">${selection.selector || ''}</div>
        `;
      } else if (selection.type === 'screenshot') {
        icon = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="3" width="18" height="18" rx="2"/><circle cx="8.5" cy="8.5" r="1.5"/><path d="M21 15l-5-5L5 21"/></svg>';
        content = `
          <img src="${selection.screenshot}" class="screenshot-thumb" alt="Screenshot">
          <div class="selection-item-text">Screenshot</div>
        `;
      }

      li.innerHTML = `
        <div class="selection-item-icon">${icon}</div>
        <div class="selection-item-content">${content}</div>
        <button class="selection-item-delete" data-index="${index}" title="Delete">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/>
          </svg>
        </button>
      `;

      // Hover to highlight
      if (selection.selector && selection.bounds) {
        li.addEventListener('mouseenter', () => highlightSelection(selection));
        li.addEventListener('mouseleave', () => clearHighlight());
      }

      selectionsList.appendChild(li);
    });

    // Add delete listeners
    document.querySelectorAll('.selection-item-delete').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const index = parseInt((e.currentTarget as HTMLElement).dataset.index || '0');
        deleteSelection(index);
      });
    });
  }

  // Highlight selected element
  function highlightSelection(selection: Selection) {
    if (!selection.selector || !elementHighlight) return;

    try {
      const element = document.querySelector(selection.selector) as HTMLElement;
      if (!element) return;

      const rect = element.getBoundingClientRect();
      elementHighlight.style.top = `${rect.top + window.scrollY}px`;
      elementHighlight.style.left = `${rect.left + window.scrollX}px`;
      elementHighlight.style.width = `${rect.width}px`;
      elementHighlight.style.height = `${rect.height}px`;
      elementHighlight.classList.remove('hidden');
    } catch (e) {
      console.error('Failed to highlight:', e);
    }
  }

  // Clear highlight
  function clearHighlight() {
    elementHighlight?.classList.add('hidden');
  }

  // Delete selection
  function deleteSelection(index: number) {
    selections.splice(index, 1);
    saveSelections();
  }

  // Enter selection mode
  function enterSelectionMode(mode: 'text' | 'screenshot') {
    selectionMode = mode;

    if (mode === 'text') {
      selectionOverlay?.classList.remove('hidden');
      selectTextBtn?.classList.add('active');
      document.body.style.cursor = 'crosshair';

      // Add mouseover listener
      document.addEventListener('mousemove', handleElementHover);
      document.addEventListener('click', handleElementClick);
    } else if (mode === 'screenshot') {
      takeScreenshot();
    }
  }

  // Exit selection mode
  function exitSelectionMode() {
    selectionMode = null;
    selectionOverlay?.classList.add('hidden');
    selectTextBtn?.classList.remove('active');
    document.body.style.cursor = '';
    clearHighlight();

    document.removeEventListener('mousemove', handleElementHover);
    document.removeEventListener('click', handleElementClick);
  }

  // Handle element hover
  function handleElementHover(e: MouseEvent) {
    if (!selectionMode || !elementHighlight) return;

    const target = e.target as HTMLElement;

    // Ignore feedback widget elements
    if (target.closest('#feedback-widget') || target.closest('#selection-overlay')) {
      clearHighlight();
      return;
    }

    highlightedElement = target;

    const rect = target.getBoundingClientRect();
    elementHighlight.style.top = `${rect.top + window.scrollY}px`;
    elementHighlight.style.left = `${rect.left + window.scrollX}px`;
    elementHighlight.style.width = `${rect.width}px`;
    elementHighlight.style.height = `${rect.height}px`;
    elementHighlight.classList.remove('hidden');
  }

  // Handle element click
  function handleElementClick(e: MouseEvent) {
    if (!selectionMode) return;

    e.preventDefault();
    e.stopPropagation();

    const target = e.target as HTMLElement;

    // Ignore feedback widget and overlay
    if (target.closest('#feedback-widget') || target.closest('#selection-overlay')) {
      return;
    }

    // Add selection
    const selector = getSelector(target);
    const text = getTextPreview(target);
    const bounds = target.getBoundingClientRect();

    const selection: Selection = {
      id: Date.now().toString(),
      type: 'element',
      content: text,
      selector: selector,
      bounds: {
        top: bounds.top,
        left: bounds.left,
        width: bounds.width,
        height: bounds.height,
        right: bounds.right,
        bottom: bounds.bottom,
        x: bounds.x,
        y: bounds.y,
        toJSON: () => ({})
      } as DOMRect,
      timestamp: Date.now()
    };

    selections.push(selection);
    saveSelections();
    exitSelectionMode();
  }

  // Take screenshot
  async function takeScreenshot() {
    try {
      // Use html2canvas to capture the page
      const canvas = await html2canvas(document.body, {
        allowTaint: true,
        useCORS: true,
        scale: 0.5, // Reduce size
        windowWidth: window.innerWidth,
        windowHeight: window.innerHeight
      });

      const dataUrl = canvas.toDataURL('image/jpeg', 0.7);

      const selection: Selection = {
        id: Date.now().toString(),
        type: 'screenshot',
        content: 'Page screenshot',
        screenshot: dataUrl,
        timestamp: Date.now()
      };

      selections.push(selection);
      saveSelections();

    } catch (error) {
      console.error('Screenshot failed:', error);
      alert('Failed to take screenshot. Please try again.');
    }
  }

  // Panel functions
  function openPanel() {
    panel?.classList.remove('hidden');
    loadSelections();

    const savedEmail = getCookie('feedback_email');
    if (savedEmail && emailInput) {
      emailInput.value = savedEmail;
    }
  }

  function closePanel() {
    panel?.classList.add('hidden');
    exitSelectionMode();
    form?.reset();
    successMsg?.classList.add('hidden');
    errorMsg?.classList.add('hidden');
    form?.classList.remove('hidden');
  }

  // Event listeners
  trigger?.addEventListener('click', openPanel);
  closeBtn?.addEventListener('click', closePanel);
  cancelBtn?.addEventListener('click', closePanel);

  selectTextBtn?.addEventListener('click', () => {
    if (selectionMode === 'text') {
      exitSelectionMode();
    } else {
      exitSelectionMode();
      enterSelectionMode('text');
    }
  });

  screenshotBtn?.addEventListener('click', () => {
    enterSelectionMode('screenshot');
  });

  // Form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form as HTMLFormElement);
    const title = formData.get('title') as string;
    const details = formData.get('details') as string;
    const email = formData.get('email') as string;

    if (email && email.trim().length > 0) {
      setCookie('feedback_email', email.trim());
    }

    let body = details || 'No additional details provided.';

    // Add selections to body
    if (selections.length > 0) {
      body += '\n\n## Selected Elements\n\n';
      selections.forEach((sel, i) => {
        if (sel.type === 'element') {
          body += `${i + 1}. **Element:** ${sel.content}\n   - Selector: \`${sel.selector}\`\n\n`;
        } else if (sel.type === 'screenshot') {
          body += `${i + 1}. **Screenshot attached**\n\n`;
        }
      });
    }

    if (email) {
      body += `\n\n---\n**Reporter:** ${email}`;
    }

    body += `\n**Page:** ${window.location.href}`;
    body += `\n**User Agent:** ${navigator.userAgent}`;

    try {
      const response = await fetch('/api/feedback', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title,
          body,
          selections: selections.map(s => ({
            type: s.type,
            content: s.content,
            selector: s.selector,
            screenshot: s.type === 'screenshot' ? s.screenshot : undefined
          }))
        })
      });

      if (response.ok) {
        // Clear selections
        selections = [];
        setCookie('feedback_selections', '', -1); // Delete cookie

        form?.classList.add('hidden');
        successMsg?.classList.remove('hidden');
        setTimeout(closePanel, 3000);
      } else {
        throw new Error('Failed to submit');
      }
    } catch (error) {
      console.error('Feedback error:', error);
      form?.classList.add('hidden');
      errorMsg?.classList.remove('hidden');
    }
  });

  // Keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      if (selectionMode) {
        exitSelectionMode();
      } else if (!panel?.classList.contains('hidden')) {
        closePanel();
      }
    }
  });

  // Close when clicking outside
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (!panel?.contains(target) && !trigger?.contains(target) && !panel?.classList.contains('hidden')) {
      closePanel();
    }
  });

  // Initialize
  loadSelections();
</script>
